<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsyncAwaitBestPractices.MVVM</name>
    </assembly>
    <members>
        <member name="T:AsyncAwaitBestPractices.MVVM.AsyncCommand`1">
            <summary>
            An implementation of IAsyncCommand. Allows Commands to safely be used asynchronously with Task.
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaskExtensions.MVVM.AsyncCommand`1"/> class.
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="E:AsyncAwaitBestPractices.MVVM.AsyncCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncCommand`1.CanExecute(System.Object)">
            <summary>
            Determines whether the command can execute in its current state
            </summary>
            <returns><c>true</c>, if this command can be executed; otherwise, <c>false</c>.</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncCommand`1.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The executed Task</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="T:AsyncAwaitBestPractices.MVVM.AsyncCommand">
            <summary>
            An implementation of IAsyncCommand. Allows Commands to safely be used asynchronously with Task.
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaskExtensions.MVVM.AsyncCommand`1"/> class.
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="E:AsyncAwaitBestPractices.MVVM.AsyncCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncCommand.CanExecute(System.Object)">
            <summary>
            Determines whether the command can execute in its current state
            </summary>
            <returns><c>true</c>, if this command can be executed; otherwise, <c>false</c>.</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncCommand.ExecuteAsync">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The executed Task</returns>
        </member>
        <member name="T:AsyncAwaitBestPractices.MVVM.AsyncValueCommand`1">
            <summary>
            An implementation of IAsyncValueCommand. Allows Commands to safely be used asynchronously with Task.
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncValueCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.ValueTask},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaskExtensions.MVVM.AsyncCommand`1"/> class.
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="E:AsyncAwaitBestPractices.MVVM.AsyncValueCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncValueCommand`1.CanExecute(System.Object)">
            <summary>
            Determines whether the command can execute in its current state
            </summary>
            <returns><c>true</c>, if this command can be executed; otherwise, <c>false</c>.</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncValueCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncValueCommand`1.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The executed Task</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="T:AsyncAwaitBestPractices.MVVM.AsyncValueCommand">
            <summary>
            An implementation of IAsyncValueCommand. Allows Commands to safely be used asynchronously with Task.
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncValueCommand.#ctor(System.Func{System.Threading.Tasks.ValueTask},System.Func{System.Object,System.Boolean},System.Action{System.Exception},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TaskExtensions.MVVM.AsyncCommand`1"/> class.
            </summary>
            <param name="execute">The Function executed when Execute or ExecuteAsync is called. This does not check canExecute before executing and will execute even if canExecute is false</param>
            <param name="canExecute">The Function that verifies whether or not AsyncCommand should execute.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c> continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c> continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="E:AsyncAwaitBestPractices.MVVM.AsyncValueCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncValueCommand.CanExecute(System.Object)">
            <summary>
            Determines whether the command can execute in its current state
            </summary>
            <returns><c>true</c>, if this command can be executed; otherwise, <c>false</c>.</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncValueCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.AsyncValueCommand.ExecuteAsync">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The executed Task</returns>
        </member>
        <member name="T:AsyncAwaitBestPractices.MVVM.IAsyncCommand`1">
            <summary>
            An Async implementation of ICommand for Task
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.IAsyncCommand`1.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The Task to execute</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.IAsyncCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="T:AsyncAwaitBestPractices.MVVM.IAsyncCommand">
            <summary>
            An Async implementation of ICommand for Task
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.IAsyncCommand.ExecuteAsync">
            <summary>
            Executes the Command as a Task
            </summary>
            <returns>The Task to execute</returns>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.IAsyncCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="T:AsyncAwaitBestPractices.MVVM.IAsyncValueCommand`1">
            <summary>
            An Async implementation of ICommand for ValueTask
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.IAsyncValueCommand`1.ExecuteAsync(`0)">
            <summary>
            Executes the Command as a ValueTask
            </summary>
            <returns>The ValueTask to execute</returns>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.IAsyncValueCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="T:AsyncAwaitBestPractices.MVVM.IAsyncValueCommand">
            <summary>
            An Async implementation of ICommand for ValueTask
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.IAsyncValueCommand.ExecuteAsync">
            <summary>
            Executes the Command as a ValueTask
            </summary>
            <returns>The ValueTask to execute</returns>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.IAsyncValueCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the CanExecuteChanged event.
            </summary>
        </member>
        <member name="T:AsyncAwaitBestPractices.MVVM.InvalidCommandParameterException">
            <summary>
            Represents errors that occur during IAsyncCommand execution.
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.InvalidCommandParameterException.#ctor(System.Type,System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TaskExtensions.MVVM.InvalidCommandParameterException"/> class.
            </summary>
            <param name="expectedType">Expected parameter type for AsyncCommand.Execute.</param>
            <param name="actualType">Actual parameter type for AsyncCommand.Execute.</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.InvalidCommandParameterException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TaskExtensions.MVVM.InvalidCommandParameterException"/> class.
            </summary>
            <param name="expectedType">Expected parameter type for AsyncCommand.Execute.</param>
            <param name="actualType">Actual parameter type for AsyncCommand.Execute.</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.InvalidCommandParameterException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TaskExtensions.MVVM.InvalidCommandParameterException"/> class.
            </summary>
            <param name="expectedType">Expected parameter type for AsyncCommand.Execute.</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.MVVM.InvalidCommandParameterException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TaskExtensions.MVVM.InvalidCommandParameterException"/> class.
            </summary>
            <param name="expectedType">Expected parameter type for AsyncCommand.Execute.</param>
        </member>
    </members>
</doc>
