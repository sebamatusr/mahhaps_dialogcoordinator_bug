<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsyncAwaitBestPractices</name>
    </assembly>
    <members>
        <member name="T:AsyncAwaitBestPractices.InvalidHandleEventException">
            <summary>
            Represents errors that occur during WeakEventManager.HandleEvent execution.
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.InvalidHandleEventException.#ctor(System.String,System.Reflection.TargetParameterCountException)">
            <summary>
            Initializes a new instance of the <see cref="T:AsyncAwaitBestPractices.InvalidHandleEventException"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="targetParameterCountException">Target parameter count exception.</param>
        </member>
        <member name="T:AsyncAwaitBestPractices.SafeFireAndForgetExtensions">
            <summary>
            Extension methods for System.Threading.Tasks.Task and System.Threading.Tasks.ValueTask
            </summary> 
            <summary>
            Extension methods for System.Threading.Tasks.Task and System.Threading.Tasks.ValueTask
            </summary> 
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget(System.Threading.Tasks.ValueTask,System.Action{System.Exception}@,System.Boolean@)">
            <summary>
            Safely execute the ValueTask without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">ValueTask.</param>
            <param name="onException">If an exception is thrown in the ValueTask, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget``1(System.Threading.Tasks.ValueTask,System.Action{``0}@,System.Boolean@)">
            <summary>
            Safely execute the ValueTask without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">ValueTask.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <typeparam name="TException">Exception type. If an exception is thrown of a different type, it will not be handled</typeparam>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget(System.Threading.Tasks.Task,System.Action{System.Exception}@,System.Boolean@)">
            <summary>
            Safely execute the Task without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">Task.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget``1(System.Threading.Tasks.Task,System.Action{``0}@,System.Boolean@)">
            <summary>
            Safely execute the Task without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">Task.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <typeparam name="TException">Exception type. If an exception is thrown of a different type, it will not be handled</typeparam>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.Initialize(System.Boolean@)">
             <summary>
             Initialize SafeFireAndForget
            
             Warning: When <c>true</c>, there is no way to catch this exception and it will always result in a crash. Recommended only for debugging purposes.
             </summary>
             <param name="shouldAlwaysRethrowException">If set to <c>true</c>, after the exception has been caught and handled, the exception will always be rethrown.</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.RemoveDefaultExceptionHandling">
            <summary>
            Remove the default action for SafeFireAndForget
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SetDefaultExceptionHandling(System.Action{System.Exception}@)">
            <summary>
            Set the default action for SafeFireAndForget to handle every exception
            </summary>
            <param name="onException">If an exception is thrown in the Task using SafeFireAndForget, <c>onException</c> will execute</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget(System.Threading.Tasks.ValueTask,System.Action{System.Exception},System.Boolean)">
            <summary>
            Safely execute the ValueTask without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">ValueTask.</param>
            <param name="onException">If an exception is thrown in the ValueTask, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget``1(System.Threading.Tasks.ValueTask,System.Action{``0},System.Boolean)">
            <summary>
            Safely execute the ValueTask without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">ValueTask.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <typeparam name="TException">Exception type. If an exception is thrown of a different type, it will not be handled</typeparam>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget(System.Threading.Tasks.Task,System.Action{System.Exception},System.Boolean)">
            <summary>
            Safely execute the Task without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">Task.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget``1(System.Threading.Tasks.Task,System.Action{``0},System.Boolean)">
            <summary>
            Safely execute the Task without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">Task.</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <typeparam name="TException">Exception type. If an exception is thrown of a different type, it will not be handled</typeparam>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.Initialize(System.Boolean)">
             <summary>
             Initialize SafeFireAndForget
            
             Warning: When <c>true</c>, there is no way to catch this exception and it will always result in a crash. Recommended only for debugging purposes.
             </summary>
             <param name="shouldAlwaysRethrowException">If set to <c>true</c>, after the exception has been caught and handled, the exception will always be rethrown.</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SetDefaultExceptionHandling(System.Action{System.Exception})">
            <summary>
            Set the default action for SafeFireAndForget to handle every exception
            </summary>
            <param name="onException">If an exception is thrown in the Task using SafeFireAndForget, <c>onException</c> will execute</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget(System.Threading.Tasks.ValueTask,System.Boolean@,System.Action{System.Exception}@)">
            <summary>
            Safely execute the ValueTask without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">ValueTask.</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <param name="onException">If an exception is thrown in the ValueTask, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget``1(System.Threading.Tasks.ValueTask,System.Boolean@,System.Action{``0}@)">
            <summary>
            Safely execute the ValueTask without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">ValueTask.</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <typeparam name="TException">Exception type. If an exception is thrown of a different type, it will not be handled</typeparam>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget(System.Threading.Tasks.Task,System.Boolean@,System.Action{System.Exception}@)">
            <summary>
            Safely execute the Task without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">Task.</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.SafeFireAndForgetExtensions.SafeFireAndForget``1(System.Threading.Tasks.Task,System.Boolean@,System.Action{``0}@)">
            <summary>
            Safely execute the Task without waiting for it to complete before moving to the next line of code; commonly known as "Fire And Forget". Inspired by John Thiriet's blog post, "Removing Async Void": https://johnthiriet.com/removing-async-void/.
            </summary>
            <param name="task">Task.</param>
            <param name="continueOnCapturedContext">If set to <c>true</c>, continue on captured context; this will ensure that the Synchronization Context returns to the calling thread. If set to <c>false</c>, continue on a different context; this will allow the Synchronization Context to continue on a different thread</param>
            <param name="onException">If an exception is thrown in the Task, <c>onException</c> will execute. If onException is null, the exception will be re-thrown</param>
            <typeparam name="TException">Exception type. If an exception is thrown of a different type, it will not be handled</typeparam>
        </member>
        <member name="T:AsyncAwaitBestPractices.WeakEventManager`1">
            <summary>
            Weak event manager that allows for garbage collection when the EventHandler is still subscribed
            </summary>
            <typeparam name="TEventArgs">Event args type.</typeparam>
            <summary>
            Weak event manager that allows for garbage collection when the EventHandler is still subscribed
            </summary>
            <typeparam name="TEventArgs">Event args type.</typeparam>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.AddEventHandler(System.EventHandler{`0}@,System.String@)">
            <summary>
            Adds the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.AddEventHandler(System.Action{`0}@,System.String@)">
            <summary>
            Adds the event handler
            </summary>
            <param name="action">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.RemoveEventHandler(System.EventHandler{`0}@,System.String@)">
            <summary>
            Removes the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.RemoveEventHandler(System.Action{`0}@,System.String@)">
            <summary>
            Removes the event handler
            </summary>
            <param name="action">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.HandleEvent(System.Object@,`0@,System.String@)">
            <summary>
            Executes the event EventHandler
            </summary>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.HandleEvent(`0@,System.String@)">
            <summary>
            Executes the event Action
            </summary>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.AddEventHandler(System.EventHandler{`0},System.String)">
            <summary>
            Adds the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.AddEventHandler(System.Action{`0},System.String)">
            <summary>
            Adds the event handler
            </summary>
            <param name="action">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.RemoveEventHandler(System.EventHandler{`0},System.String)">
            <summary>
            Removes the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.RemoveEventHandler(System.Action{`0},System.String)">
            <summary>
            Removes the event handler
            </summary>
            <param name="action">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.HandleEvent(System.Object,`0,System.String)">
            <summary>
            Executes the event EventHandler
            </summary>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager`1.HandleEvent(`0,System.String)">
            <summary>
            Executes the event Action
            </summary>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="T:AsyncAwaitBestPractices.WeakEventManager">
            <summary>
            Weak event manager that allows for garbage collection when the EventHandler is still subscribed
            </summary>
            <summary>
            Weak event manager that allows for garbage collection when the EventHandler is still subscribed
            </summary>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager.AddEventHandler(System.Delegate@,System.String@)">
            <summary>
            Adds the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager.RemoveEventHandler(System.Delegate@,System.String@)">
            <summary>
            Removes the event handler.
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager.HandleEvent(System.Object@,System.Object@,System.String@)">
            <summary>
            Executes the event EventHandler
            </summary>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager.HandleEvent(System.String@)">
            <summary>
            Executes the event Action
            </summary>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager.AddEventHandler(System.Delegate,System.String)">
            <summary>
            Adds the event handler
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager.RemoveEventHandler(System.Delegate,System.String)">
            <summary>
            Removes the event handler.
            </summary>
            <param name="handler">Handler</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager.HandleEvent(System.Object,System.Object,System.String)">
            <summary>
            Executes the event EventHandler
            </summary>
            <param name="sender">Sender</param>
            <param name="eventArgs">Event arguments</param>
            <param name="eventName">Event name</param>
        </member>
        <member name="M:AsyncAwaitBestPractices.WeakEventManager.HandleEvent(System.String)">
            <summary>
            Executes the event Action
            </summary>
            <param name="eventName">Event name</param>
        </member>
    </members>
</doc>
